#!/bin/bash

# deploy.sh - Script complet de deployment pentru DigitalOcean
# RuleazÄƒ cu: chmod +x deploy.sh && ./deploy.sh

set -e  # OpreÈ™te scriptul la prima eroare

# Culori pentru output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# FuncÈ›ii helper
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# ConfiguraÈ›ii
DOMAIN="dariushreniuc.com"
EMAIL="your_email@gmail.com"  # SchimbÄƒ cu email-ul tÄƒu pentru Let's Encrypt
APP_DIR="/opt/barbershop"
BACKUP_DIR="/opt/backups"

log_info " ÃŽncepe deployment-ul pentru $DOMAIN"

# 1. VerificÄƒ dacÄƒ ruleazÄƒ ca root
if [[ $EUID -ne 0 ]]; then
   log_error "Acest script trebuie rulat ca root (sudo ./deploy.sh)"
   exit 1
fi

# 2. Update sistem
log_info " ActualizeazÄƒ sistemul..."
apt update && apt upgrade -y

# 3. InstaleazÄƒ dependenÈ›ele necesare
log_info " InstaleazÄƒ dependenÈ›ele..."
apt install -y \
    curl \
    wget \
    git \
    ufw \
    htop \
    nano \
    unzip \
    software-properties-common \
    apt-transport-https \
    ca-certificates \
    gnupg \
    lsb-release

# 4. InstaleazÄƒ Docker
if ! command -v docker &> /dev/null; then
    log_info " InstaleazÄƒ Docker..."
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
    apt update
    apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
    systemctl enable docker
    systemctl start docker
    log_success "Docker instalat cu succes"
else
    log_success "Docker este deja instalat"
fi

# 5. ConfigureazÄƒ firewall
log_info " ConfigureazÄƒ firewall..."
ufw --force reset
ufw default deny incoming
ufw default allow outgoing
ufw allow ssh
ufw allow 80/tcp
ufw allow 443/tcp
ufw --force enable
log_success "Firewall configurat"

# 6. CreeazÄƒ directoarele necesare
log_info " CreeazÄƒ structura de directoare..."
mkdir -p $APP_DIR
mkdir -p $BACKUP_DIR
mkdir -p /etc/letsencrypt
mkdir -p /var/www/certbot

# 7. CloneazÄƒ/actualizeazÄƒ codul
if [ -d "$APP_DIR/.git" ]; then
    log_info " ActualizeazÄƒ codul existent..."
    cd $APP_DIR
    git pull origin main
else
    log_info "ðŸ“¥ CloneazÄƒ codul..."
    git clone https://github.com/parnau-patrick/Website $APP_DIR
    cd $APP_DIR
fi

# 8. VerificÄƒ fiÈ™ierele necesare
log_info " VerificÄƒ fiÈ™ierele necesare..."
required_files=(
    "docker-compose.yml"
    "backend.Dockerfile"
    "frontend.Dockerfile"
    "nginx-production.conf"
    "backend/.env"
)

for file in "${required_files[@]}"; do
    if [ ! -f "$file" ]; then
        log_error "FiÈ™ierul $file nu existÄƒ!"
        exit 1
    fi
done

# 9. VerificÄƒ configuraÈ›ia .env
if [ ! -f "backend/.env" ]; then
    log_error "FiÈ™ierul backend/.env nu existÄƒ!"
    log_info "CopiazÄƒ backend/.env.production la backend/.env È™i configureazÄƒ-l"
    exit 1
fi

# 10. OpreÈ™te serviciile existente (dacÄƒ existÄƒ)
log_info " OpreÈ™te serviciile existente..."
docker compose down --remove-orphans || true

# 11. ConstruieÈ™te È™i porneÈ™te serviciile
log_info " ConstruieÈ™te imaginile Docker..."
docker compose build --no-cache

log_info " PorneÈ™te serviciile..."
docker compose up -d

# 12. AÈ™teaptÄƒ ca serviciile sÄƒ fie gata
log_info " AÈ™teaptÄƒ ca serviciile sÄƒ porneascÄƒ..."
sleep 30

# 13. VerificÄƒ starea serviciilor
log_info " VerificÄƒ starea serviciilor..."
docker compose ps

# 14. TesteazÄƒ conectivitatea
log_info " TesteazÄƒ serviciile..."
if curl -f http://localhost:80/health &> /dev/null; then
    log_success "Frontend este funcÈ›ional"
else
    log_warning "Frontend nu rÄƒspunde la health check"
fi

# 15. ConfigureazÄƒ SSL cu Let's Encrypt
log_info " ConfigureazÄƒ SSL cu Let's Encrypt..."
read -p "Vrei sÄƒ configurezi SSL acum? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    ./setup-ssl.sh $DOMAIN $EMAIL
fi

# 16. ConfigureazÄƒ backup automat
log_info " ConfigureazÄƒ backup-ul automat..."
cat > /etc/cron.d/barbershop-backup << EOF
# Backup zilnic la 2:00 AM
0 2 * * * root $APP_DIR/backup.sh >> /var/log/barbershop-backup.log 2>&1
EOF

# 17. ConfigureazÄƒ actualizÄƒri automate de securitate
log_info " ConfigureazÄƒ actualizÄƒrile automate de securitate..."
apt install -y unattended-upgrades
echo 'Unattended-Upgrade::Automatic-Reboot "false";' >> /etc/apt/apt.conf.d/50unattended-upgrades

# 18. ConfigureazÄƒ monitoring simplu
log_info " ConfigureazÄƒ monitoring..."
cat > /usr/local/bin/barbershop-monitor.sh << 'EOF'
#!/bin/bash
cd /opt/barbershop
if ! docker compose ps | grep -q "Up"; then
    echo "$(date): Serviciile nu ruleazÄƒ, repornire..." >> /var/log/barbershop-monitor.log
    docker compose up -d
fi
EOF

chmod +x /usr/local/bin/barbershop-monitor.sh

# AdaugÄƒ job de monitoring la cron
cat > /etc/cron.d/barbershop-monitor << EOF
# VerificÄƒ serviciile la fiecare 5 minute
*/5 * * * * root /usr/local/bin/barbershop-monitor.sh
EOF

# 19. AfiÈ™eazÄƒ informaÈ›ii finale
log_success " Deployment finalizat cu succes!"
echo
log_info " InformaÈ›ii importante:"
echo "   â€¢ Directorul aplicaÈ›iei: $APP_DIR"
echo "   â€¢ Backup-uri: $BACKUP_DIR"
echo "   â€¢ Log-uri aplicaÈ›ie: docker compose logs -f"
echo "   â€¢ Restart servicii: docker compose restart"
echo "   â€¢ Stop servicii: docker compose down"
echo "   â€¢ Start servicii: docker compose up -d"
echo
log_info " Website-ul va fi disponibil la:"
echo "   â€¢ http://$DOMAIN (va fi redirectat cÄƒtre HTTPS)"
echo "   â€¢ https://$DOMAIN (dupÄƒ configurarea SSL)"
echo
log_warning "  NU uita sÄƒ:"
echo "   1. Configurezi DNS-ul pentru $DOMAIN sÄƒ pointeze la acest server"
echo "   2. Configurezi SSL cu ./setup-ssl.sh dacÄƒ nu ai fÄƒcut-o deja"
echo "   3. Verifici configuraÈ›ia backend/.env"
echo "   4. Testezi toate funcÈ›ionalitÄƒÈ›ile site-ului"
echo
log_info " Pentru monitorizare:"
echo "   â€¢ docker compose ps  - status servicii"
echo "   â€¢ docker compose logs -f  - log-uri live"
echo "   â€¢ htop  - utilizare sistem"