user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

# Optimizări pentru performanță
worker_rlimit_nofile 65535;

events {
    worker_connections 2048;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging format optimizat
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;

    # Optimizări pentru performanță
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 1000;

    # Securitate - limite pentru cereri
    client_max_body_size 10M;
    client_body_buffer_size 128k;
    client_header_buffer_size 3m;
    large_client_header_buffers 4 256k;
    client_body_timeout 30s;
    client_header_timeout 30s;
    send_timeout 30s;

    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_proxied any;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml
        application/wasm;


    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;
    limit_req_zone $binary_remote_addr zone=api:10m rate=30r/m;
    limit_req_zone $binary_remote_addr zone=general:10m rate=1r/s;

    # Upstream backend
    upstream backend {
        server backend:5000 max_fails=3 fail_timeout=30s;
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    # Security headers map
   map $request_uri $csp_header {
    default "default-src 'self'; script-src 'self' 'unsafe-inline' https://ajax.googleapis.com https://maps.googleapis.com https://maps.gstatic.com https://d3e54v103j8qbb.cloudfront.net; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://maps.googleapis.com; font-src 'self' https://fonts.gstatic.com data:; img-src 'self' data: https://maps.googleapis.com https://maps.gstatic.com https://*.googleusercontent.com; frame-src https://www.google.com https://maps.google.com; connect-src 'self' https://maps.googleapis.com; object-src 'none'; base-uri 'self'; form-action 'self';";
}

    # Server pentru redirect HTTP → HTTPS
    server {
        listen 80;
        server_name dariushreniuc.com www.dariushreniuc.com;

        # Rate limiting pentru cereri generale
        limit_req zone=general burst=10 nodelay;

          # Permite Let's Encrypt validation
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
            try_files $uri =404;
        }

        # Health check pentru load balancer
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Redirect tot traficul către HTTPS
        location / {
            return 301 https://$server_name$request_uri;
        }
    }

    # Server principal HTTPS
    server {
        listen 443 ssl;
        http2 on;
        server_name dariushreniuc.com www.dariushreniuc.com;

        # SSL Configuration
        ssl_certificate /etc/letsencrypt/live/dariushreniuc.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/dariushreniuc.com/privkey.pem;

        # SSL Security
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 1d;
        ssl_session_tickets off;
        # OCSP stapling
        ssl_stapling on;
        ssl_stapling_verify on;
        ssl_trusted_certificate /etc/letsencrypt/live/dariushreniuc.com/chain.pem;
        resolver 8.8.8.8 8.8.4.4 valid=300s;
        resolver_timeout 5s;

        
        # Security headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy $csp_header always;
        add_header Permissions-Policy "geolocation=(), microphone=(), camera=(), payment=(), usb=(), magnetometer=(), gyroscope=(), speaker=()" always;

        # Rate limiting pentru cereri generale
        limit_req zone=general burst=20 nodelay;

        # Health check
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # API proxy către backend cu rate limiting
        location /api/ {
            # Rate limiting special pentru API
            limit_req zone=api burst=50 nodelay;

            # Rate limiting special pentru login
            location /api/login {
                limit_req zone=login burst=3 nodelay;
                proxy_pass http://backend;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header X-Forwarded-Host $server_name;
            }

            proxy_pass http://backend;

            # Proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $server_name;

               # Proxy timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;

            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 128k;
            proxy_buffers 4 256k;
            proxy_busy_buffers_size 256k;

            # Disable caching pentru API
            add_header Cache-Control "no-cache, no-store, must-revalidate" always;
            add_header Pragma "no-cache" always;
            add_header Expires "0" always;
        }

        # Redirect .html URLs la clean URLs
        location ~ ^/(.+)\.html$ {
            return 301 /$1;
        }

        # Servire fișiere statice cu cache agresiv
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|webp|avif)$ {
            root /usr/share/nginx/html;

            # Cache foarte agresiv pentru assets
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary "Accept-Encoding";

            # Compresie
            gzip_static on;

            # Încercă să servească versiunea compresată
            try_files $uri $uri.gz $uri =404;
        }

         # Servire HTML cu cache moderat
        location ~* \.html$ {
            root /usr/share/nginx/html;
            expires 1h;
            add_header Cache-Control "public, must-revalidate";
            add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
            add_header X-Frame-Options "SAMEORIGIN" always;
            add_header X-Content-Type-Options "nosniff" always;
            add_header X-XSS-Protection "1; mode=block" always;
            add_header Referrer-Policy "strict-origin-when-cross-origin" always;
            add_header Content-Security-Policy $csp_header always;
            add_header Permissions-Policy "geolocation=(), microphone=(), camera=(), payment=(), usb=(), magnetometer=(), gyroscope=()" always;
                    }

        # Locația principală pentru clean URLs
        location / {
            root /usr/share/nginx/html;

            # Încearcă fișierul exact, apoi cu .html, apoi fallback
            try_files $uri $uri.html $uri/ /index.html;

            # Cache pentru HTML
            expires 5m;
            add_header Cache-Control "public, must-revalidate";
            add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
            add_header X-Frame-Options "SAMEORIGIN" always;
            add_header X-Content-Type-Options "nosniff" always;
            add_header X-XSS-Protection "1; mode=block" always;
            add_header Referrer-Policy "strict-origin-when-cross-origin" always;
            add_header Content-Security-Policy $csp_header always;
            add_header Permissions-Policy "geolocation=(), microphone=(), camera=(), payment=(), usb=(), magnetometer=(), gyroscope=()" always;
        }

        
        # Protecție împotriva accesului la fișiere sensibile
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

        location ~ ~$ {
            deny all;
            access_log off;
            log_not_found off;
        }

        # Favicon
        location = /favicon.ico {
            log_not_found off;
            access_log off;
            expires 1y;
        }

        # Robots.txt
        location = /robots.txt {
            log_not_found off;
            access_log off;
        }
    }

    # Fallback server pentru alte domenii
    server {
        listen 80 default_server;
        listen 443 ssl default_server;
        server_name _;

        ssl_certificate /etc/letsencrypt/live/dariushreniuc.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/dariushreniuc.com/privkey.pem;

        return 444;  # Close connection without response
    }
}
